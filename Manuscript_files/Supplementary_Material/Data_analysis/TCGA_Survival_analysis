library(TCGAbiolinks)
library(GenomicRanges)
library(TCGAbiolinks)
library(survminer)
library(survival)
library(SummarizedExperiment)
library(tidyverse)
library(DESeq2)

query_mel_all = GDCquery(
  project = "TCGA-SKCM", 
  data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
  experimental.strategy = "RNA-Seq",
  workflow.type = "STAR - Counts",
  data.type = "Gene Expression Quantification",
  access = "open")


output_mel <- getResults(query_mel_all)
write.table(output_mel,"SKCM_all_sample_type_meta_gdc.txt",sep="\t",quote=FALSE, row.names=FALSE)


awk -F"\t" '/Primary Tumor/ {print $3}' SKCM_meta_gdc.txt |  awk -F"-" '{print $1"-"$2"-"$3"-"$4}' > bw_sample_id_to_use.txt
grep -wf bw_sample_id_to_use.txt ../TCGA_metadata_proj_bwID.txt | awk '{print toupper($2)".bw\t"$3}' > bw_sample_id_matchingfiles_to_load.txt

awk -F"\t" '/Metastatic/ {print $3}' SKCM_all_sample_type_meta_gdc.txt |  awk -F"-" '{print $1"-"$2"-"$3"-"$4}' > bw_sample_id_to_use_metastatic.txt
grep -wf bw_sample_id_to_use_metastatic.txt ../TCGA_metadata_proj_bwID.txt | awk '{print toupper($2)".bw\t"$3}' > bw_sample_id_matchingfiles_to_load_metastatic.txt
grep -f bw_list.txt bw_sample_id_matchingfiles_to_load_metastatic.txt > tmp
mv tmp bw_sample_id_matchingfiles_to_load_metastatic.txt

awk -F"\t" '/Metastatic|Solid Tissue Normal/ {print $3}' SKCM_all_sample_type_meta_gdc.txt |  awk -F"-" '{print $1"-"$2"-"$3"-"$4}' > bw_sample_id_to_use_metastatic_normal.txt
grep -wf bw_sample_id_to_use_metastatic_normal.txt ../TCGA_metadata_proj_bwID.txt | awk '{print toupper($2)".bw\t"$3}' > bw_sample_id_matchingfiles_to_load_metastatic_normal.txt
ls *bw > bw_list.txt
grep -f bw_list.txt bw_sample_id_matchingfiles_to_load_metastatic_normal.txt > tmp
mv tmp bw_sample_id_matchingfiles_to_load_metastatic_normal.txt

##
df <- read.csv("bw_sample_id_matchingfiles_to_load_metastatic_normal.txt",sep="\t",header=FALSE) #removed 72189C87-53DD-427E-B163-91E404577A7A.bw C7A75027-D49D-4D60-93A8-588487B5D690.bw

# Loop through each row in the data frame
for (i in 1:nrow(df)) {
  V1 <- df$V1[i]
  V2 <- df$V2[i]
  
  # Calculate coverage using get_coverage
  bw_cov <- get_coverage(V1,
                         op = "mean",
                         annotation = "uTARs.bed") #../uTAR_top.bed
  
  # Save the coverage results with the specified output name
  output_V1 <- paste0(V2, ".txt")
  write.table(bw_cov, output_V1, sep = "\t", quote = FALSE, row.names = FALSE)
}

### In Linux terminal
for file in TCGA*.txt; do
echo -n -e "\t${file%.txt}"
done > header.txt
# Concatenate 'score' columns
for file in TCGA*.txt; do
cut -f 6 $file > ${file%.txt}_scores.txt
done
# Combine header and score columns
paste header.txt *_scores.txt > coverage_mat.txt
# Clean up temporary files
rm header.txt *_scores.txt
grep -E "id|Metastatic" SKCM_all_sample_type_meta_gdc.txt > SKCM_metastatic_meta_gdc.txt
grep -E "id|Metastatic|Solid Tissue Normal" SKCM_all_sample_type_meta_gdc.txt > SKCM_metastatic_normal_meta_gdc.txt

# Back in R
mel_matrix <- read.csv("coverage_mat.txt",sep='\t',header=TRUE, check.names = FALSE)
rownames(mel_matrix)<-mel_matrix$gene
mel_matrix<-mel_matrix[,-1]
#colnames(mel_matrix)<-gsub("-01A","",colnames(mel_matrix))
colnames(mel_matrix)<- gsub('-06.*', '', colnames(mel_matrix))
colnames(mel_matrix)<- gsub('-07.*', '', colnames(mel_matrix))
colnames(mel_matrix)<- gsub('-11.*', '', colnames(mel_matrix))

clinical_mel<-read.csv("Clinical_data_mel.txt",sep="\t",header=TRUE)

#output_mel<-read.csv("SKCM_metastatic_meta_gdc.txt",sep="\t",header=TRUE)
output_mel<-read.csv("SKCM_metastatic_normal_meta_gdc.txt",sep="\t",header=TRUE)
tumor <- output_mel$cases


unique(output_mel$sample_type)
query_mel <- GDCquery(
  project = "TCGA-SKCM",
  data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
  experimental.strategy = "RNA-Seq",
  workflow.type = "STAR - Counts",
  data.type = "Gene Expression Quantification",
  sample.type = c("Metastatic", "Additional Metastatic","Solid Tissue Normal"),
  access = "open",
  barcode = tumor)

  GDCdownload(query_mel)

# get counts
tcga_mel_data <- GDCprepare(query_mel, summarizedExperiment = TRUE)
coldata <- as.data.frame(colData(tcga_mel_data))

#rownames(coldata)<-coldata$submitter_id #do the below if duplicates found


duplicated_ids <- duplicated(coldata$submitter_id)
duplicated_values <- coldata[duplicated_ids, "submitter_id"]  # Identify duplicated values in the 'submitter_id' column

# Subset the DataFrame to exclude one of the duplicates
coldata_no_duplicates <- coldata[!duplicated_ids, ]
# Update row names if needed
rownames(coldata_no_duplicates) <- coldata_no_duplicates$submitter_id
mel_matrix<-mel_matrix[,rownames(coldata_no_duplicates)]

#reorder rownames(coldata) and colnames(mel_matrix) to match
matching_indices <- match(colnames(mel_matrix), rownames(coldata_no_duplicates))
coldata_reordered <- coldata_no_duplicates[matching_indices, ]
rounded_mel_matrix <- round(mel_matrix*100, digits = 0)
# 14, 319
colnames(rounded_mel_matrix)[14]<-"TCGA-D3-A1QA.1"
colnames(rounded_mel_matrix)[319]<-"TCGA-GN-A4U8.1"


# vst transform counts to be used in survival analysis ---------------
# Setting up countData object   
dds <- DESeqDataSetFromMatrix(countData = rounded_mel_matrix,
                              colData = coldata_reordered,
                              design = ~ 1)

# vst 
vsd <- vst(dds, blind = TRUE, nsub = nrow(dds),fitType='local')
mel_matrix_vst <- assay(vsd)
mel_matrix_vst[11,]

#rounded_mel_matrix
mel_uTAR4 <- mel_matrix_vst %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'gene_id') %>% 
  gather(key = 'case_id', value = 'counts', -gene_id) %>% 
#  left_join(., gene_metadata, by = "gene_id") %>% 
  filter(gene_id == "PHF11")

# get median value
median_value <- median(mel_uTAR4$counts)

# denote which cases have higher or lower expression than median count
mel_uTAR4$strata <- ifelse(mel_uTAR4$counts >= median_value, "HIGH", "LOW")

# Add clinical information to mel_tp53
#mel_uTAR4$case_id <- gsub('-01.*', '', mel_uTAR4$case_id)
mel_uTAR4 <- merge(mel_uTAR4, clinical_mel, by.x = 'case_id', by.y = 'submitter_id')
survdiff(Surv(overall_survival, deceased) ~ strata, data = mel_uTAR4) #stats


fit <- survfit(Surv(overall_survival, deceased) ~ strata, data = mel_uTAR4)
fit

# Plot the survival fit using ggsurvplot

pdf("genes/sum_all_genes_survival_PMELm9.pdf")
ggsurvplot(fit,
           data = mel_uTAR4,
           pval = T,
           risk.table = T)
dev.off()

fit_subset <- survfit(Surv(overall_survival, deceased) ~ strata,data = subset(mel_uTAR4, overall_survival > 2000))
survdiff(Surv(overall_survival, deceased) ~ strata, data = subset(mel_uTAR4, overall_survival > 4000))

### For a subset
pdf("sum_all_survival_subsetnew.pdf")
ggsurvplot(fit_subset,
           data = subset(mel_uTAR4, overall_survival > 2000),
           pval = TRUE,
           risk.table = TRUE)
dev.off()
